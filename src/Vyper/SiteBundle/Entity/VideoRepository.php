<?php

namespace Vyper\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * VideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoRepository extends EntityRepository
{
    public function getByPictureId($pictureID)
    {
        $queryBuilder = $this->createQueryBuilder('t');
        $queryBuilder
            ->where('t.picture = :pictureID')
            ->setParameter('pictureID', $pictureID)
        ;
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('v');
        $queryBuilder->where('v.deleted = false');
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function last()
    {
        $queryBuilder = $this->createQueryBuilder('v');
        $queryBuilder
            ->where('v.deleted = false')
            ->orderBy('v.created', 'DESC')
            ->setMaxResults(1)
        ;
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function lastFive()
    {
        $queryBuilder = $this->createQueryBuilder('v');
        $queryBuilder
            ->where('v.deleted = false')
            ->orderBy('v.created', 'DESC')
            ->setMaxResults(5)
        ;
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function showAll($videos_per_page, $page)
    {
        if ($page < 1) {
            throw new \InvalidArgumentException('Can not be < 1');
        }

        $queryBuilder = $this->createQueryBuilder('v');
        $queryBuilder
            ->where('v.deleted = false')
            ->orderBy('v.created', 'DESC')
        ;
        $query = $queryBuilder->getQuery();


        $query
            ->setFirstResult(($page-1) * $videos_per_page)
            ->setMaxResults($videos_per_page)
        ;

        return new Paginator($query);
    }
}
